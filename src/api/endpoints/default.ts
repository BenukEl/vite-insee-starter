/**
 * Generated by orval v6.29.1 üç∫
 * Do not edit manually.
 * My API
 * OpenAPI spec version: 1.0.6
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
    MutationFunction,
    QueryFunction,
    QueryKey,
    UseMutationOptions,
    UseMutationResult,
    UseQueryOptions,
    UseQueryResult
} from "@tanstack/react-query";
import type { PutTodoIdParams, Todo } from "../model";
import { customInstance } from "../mutator/customInstance";

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

export const putTodoId = (
    id: string,
    params: PutTodoIdParams,
    options?: SecondParameter<typeof customInstance>
) => {
    return customInstance<void>({ url: `/todo/${id}`, method: "PUT", params }, options);
};

export const getPutTodoIdMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof putTodoId>>,
        TError,
        { id: string; params: PutTodoIdParams },
        TContext
    >;
    request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
    Awaited<ReturnType<typeof putTodoId>>,
    TError,
    { id: string; params: PutTodoIdParams },
    TContext
> => {
    const { mutation: mutationOptions, request: requestOptions } = options ?? {};

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof putTodoId>>,
        { id: string; params: PutTodoIdParams }
    > = props => {
        const { id, params } = props ?? {};

        return putTodoId(id, params, requestOptions);
    };

    return { mutationFn, ...mutationOptions };
};

export type PutTodoIdMutationResult = NonNullable<Awaited<ReturnType<typeof putTodoId>>>;

export type PutTodoIdMutationError = unknown;

export const usePutTodoId = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof putTodoId>>,
        TError,
        { id: string; params: PutTodoIdParams },
        TContext
    >;
    request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
    Awaited<ReturnType<typeof putTodoId>>,
    TError,
    { id: string; params: PutTodoIdParams },
    TContext
> => {
    const mutationOptions = getPutTodoIdMutationOptions(options);

    return useMutation(mutationOptions);
};
export const deleteTodoId = (id: string, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<void>({ url: `/todo/${id}`, method: "DELETE" }, options);
};

export const getDeleteTodoIdMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof deleteTodoId>>,
        TError,
        { id: string },
        TContext
    >;
    request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<Awaited<ReturnType<typeof deleteTodoId>>, TError, { id: string }, TContext> => {
    const { mutation: mutationOptions, request: requestOptions } = options ?? {};

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof deleteTodoId>>,
        { id: string }
    > = props => {
        const { id } = props ?? {};

        return deleteTodoId(id, requestOptions);
    };

    return { mutationFn, ...mutationOptions };
};

export type DeleteTodoIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteTodoId>>>;

export type DeleteTodoIdMutationError = unknown;

export const useDeleteTodoId = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof deleteTodoId>>,
        TError,
        { id: string },
        TContext
    >;
    request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<Awaited<ReturnType<typeof deleteTodoId>>, TError, { id: string }, TContext> => {
    const mutationOptions = getDeleteTodoIdMutationOptions(options);

    return useMutation(mutationOptions);
};
export const getTodos = (options?: SecondParameter<typeof customInstance>, signal?: AbortSignal) => {
    return customInstance<Todo[]>({ url: `/todos`, method: "GET", signal }, options);
};

export const getGetTodosQueryKey = () => {
    return [`/todos`] as const;
};

export const getGetTodosQueryOptions = <
    TData = Awaited<ReturnType<typeof getTodos>>,
    TError = unknown
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getTodos>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
}) => {
    const { query: queryOptions, request: requestOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetTodosQueryKey();

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTodos>>> = ({ signal }) =>
        getTodos(requestOptions, signal);

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof getTodos>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type GetTodosQueryResult = NonNullable<Awaited<ReturnType<typeof getTodos>>>;
export type GetTodosQueryError = unknown;

export const useGetTodos = <TData = Awaited<ReturnType<typeof getTodos>>, TError = unknown>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getTodos>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = getGetTodosQueryOptions(options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
};
